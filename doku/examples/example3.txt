Description:
In this example you will implement a class Stack, that provides the methods push, pull and size.

Task 1:
Define the class Stack and implement the methods push, pull and size

- Given there exists a class Stack.
- Given there exists a procedure push for the class Stack.
- Given there exists a procedure pull for the class Stack.
- Given there exists a procedure size for the class Stack.


Task 2:
Create a instance of Stack named stack and push the three character a, b, c onto the stack.

Prerequisites:
- Task 1

- When the procedure size of the object stack is called, then 3 is returned.
- When the procedure pop of the object stack is called, then c is returned.
- When the procedure pop of the object stack is called, then b is returned.
- When the procedure size of the object stack is called, then 1 is returned.
- When the procedure push of the object stack is called, then b is returned.



* Given there exists a procedure foo for the class C.

Task 3:
Define 2 instances of the class C (instanceA and instanceB) and assign instanceA to the variable ref in instanceB and assign instanceB to the variable ref in instanceA.

Prerequisites:
- Task 2

- Given there exists an object instanceA of the type C.
- Given there exists an object instanceB of the type C.
- Given that the object instanceB is assigned to variable ref in the object instanceA.
- Given that the object instanceA is assigned to variable ref in the object instanceB.

Task 4:
Execute the procedure foo of instanceA and store the returnvalue to the variable result.

Prerequisites:
- Task 3

- When the procedure foo of the object instanceA is called, the program does not terminate.

Task 5:
Introduce an mechanism that stopps the endless loop and ensures that the the method foo  only prints the string called twice to the command line.

Prerequisites:
- Task 3

- When the procedure foo of the object instanceA is called, then called \n called is displayed on the commandline.


--------------------------------------

package require XOTcl
namespace import ::xotcl::*

#Task 1

Class create Stack 

Stack instproc init {} {
  my instvar things
  my instvar size
  set things ""
}

Stack instproc push {thing} {
  my instvar things
  my instvar size  
  set things [concat [list $thing] $things]
  my incr size
  return $thing
}
  
Stack instproc pop {} {
  my instvar things
  my instvar size
  set top [lindex $things 0]
  set things [lrange $things 1 end]
  my incr size -1
  return $top
}

Stack instproc size {} {
  my instvar size
  return $size
}  

#Task 2

Stack create stack
stack push a
stack push b
stack push c
