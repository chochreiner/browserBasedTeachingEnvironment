package require XOTcl
namespace import ::xotcl::*

set opt(-symbol) YHOO
array set opt $argv

Class WebPage -parameter {{url http://nm.wu-wien.ac.at/}}

WebPage instproc parseUrl {} {
  my instvar url hostname port path
  if {[regexp {http://([^/]+)(/?.*)} $url _ hostname path]} {
    if {![regexp ^(.*):(.*)$ $hostname _ hostname port]} {
      set port 80     ;# Standardannahme
    }
    if {$path == ""} {set path /}
  }
}

WebPage instproc loadPage {{headerFields ""}} {
  my instvar hostname port path content
  my parseUrl
  set stream [socket $hostname $port]
  puts $stream "GET $path HTTP/1.0"
  puts $stream "Host: $hostname"
  foreach {tag value} $headerFields {puts $stream "$tag: $value"}
  puts $stream ""
  flush $stream
  set content [read $stream]
  close $stream
}
WebPage instproc getContent {} {
  my instvar content
  if {![my exists content]} { my loadPage }
  return $content
}


Class Stock -parameter {{symbol ""}}

Stock instproc extractData {content} {
  my instvar timeVar rate bid ask openVar volume
  if {![regexp {<div class=\"rtq_div\">(.*)Add to Portfolio} $content _ header]} {
  	puts stderr "could not extract header"
  } else {
    regexp {time_rtq_ticker\"><[^>]*>(.*)</span></span> <span class=\"down_r} $header _ rate
  regexp {time_rtq\"> <[^>]*>(.*)</span></span>.*\|} $header _ timeVar
  }

  if {![regexp {<div id=\"yfi_quote_summary_data(.*)Avg Vol } $content _ data]} {
  	puts stderr "could not extract data part"
  } else {
    regsub -all {</?tr/?>} $data "" data
    regsub -all {</?td[^>]*>} $data "" data
    regsub -all {</?th[^>]*>} $data "" data
    regsub -all {</?span[^>]*>} $data "" data
    regsub -all {</?table[^>]*>} $data "" data
    regsub -all {</?small>} $data "" data
    
    regexp {Bid:(.*)Ask} $data _ bid
    regexp {Ask:(.*)1y} $data _ ask
    regexp {Open:(.*)Bid} $data _ openVar
    regexp {Volume:(.*)} $data _ volume
  }
}

Stock instproc printData {} {
  my instvar symbol timeVar rate bid ask openVar volume
  if {[my exists timeVar] && [info exists rate] && [info exists bid] && [info exists ask] && [info exists openVar] && [info exists volume]} {
   puts "The current rate of symbol $symbol at $timeVar is $rate with following details:"
   puts "Bid: $bid"
   puts "Ask: $ask"
   puts "Open: $openVar"
   puts "Volume: $volume"
  } else {
   puts stderr "The data could not be extracted for $symbol"
  }
}

WebPage stockinfo -url http://finance.yahoo.com/q?s=$opt(-symbol)&d=1b

Stock s -symbol $opt(-symbol)
s extractData [stockinfo getContent]
s printData