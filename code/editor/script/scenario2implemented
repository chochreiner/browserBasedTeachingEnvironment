# Description:
# In this example you will create a class *C* that takes one parameter and has one variable as well as a procedure *foo*.
# You will create instances of this class and learn how to avoid endless loops, while calling methods of two syntactic indetical instances.

# Task 1:
# Define a class named *C* that takes one parameter and has one variable named *ref*.

# Given there exists a class C.
# Given there exists a variable ref in the class C. 

nx::Class create C {
  :variable ref
  :variable already_called
  
  :public method foo { } {
    if {${:already_called}==0} {
    set :already_called 1
    ${:ref} foo
    return "called"
    }
  }
}


# Task 2:
# Define the procedure *foo* of the class *C* that calls again a procedure *foo* of an instance of the class *C* and prints the string *called*.

# Given there exists a procedure foo for the class C.


# Task 3:
#Create two instances of the class *C* (*instanceA* and *instanceB*) and assign *instanceA* to the variable *ref* in *instanceB* and assign *instanceB* to the variable *ref* in *instanceA*.

# Given that instanceA is an instance of the class C.
# Given that instanceB is an instance of the class C.
# Given that the instance instanceB is assigned to variable ref in the instance instanceA.
# Given that the instance instanceA is assigned to variable ref in the instance instanceB.

C create instanceA
C create instanceB

instanceA eval {set :ref instanceB}
instanceA eval {set :already_called 0}

instanceB eval {set :ref instanceA}
instanceB eval {set :already_called 0}


# Task 4:
# Execute the procedure *foo* of *instanceA*.

# When the procedure foo of the instance instanceA is called, the program does not terminate.

instanceA foo

# Task 5:
# Introduce a mechanism that stopps the endless loop and ensures that the method foo only prints the string *called* twice.


instanceA foo